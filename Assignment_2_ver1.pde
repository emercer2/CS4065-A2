import java.util.Stack;
import java.awt.*;
import javax.swing.*;
import de.voidplus.dollar.*;
Stack<Shape> shapeStack;

float yPos = 0.0;
float x = 0.0;
float y = 0.0;
float weight = 4;
int mode = 0;
String[] modeNames = {"Freeform", "Line", "Rectangle", "Oval"};
String[] colorNames = {"Black", "Red", "Green", "Blue"};
color currColor = color(0,0,0);
int colorIndex = 0;
boolean firstShape;

OneDollar one;
String gestureString = "Gesture Drawn";
boolean gestureMade = false;
int interval = 1000;
int time;

JDialog jd = new JDialog();
JPanel jp = new JPanel();
String setting = "";

void setup() {
   size(1280,720);
   frameRate(60);
   background(255,255,255);
   shapeStack = new Stack();
   
   JButton settings1 = new JButton("Gesture App Settings");
   JButton settings2 = new JButton("Shortcut Key App Settings");
   
   settings1.addActionListener(e->setGestures());
   settings2.addActionListener(e->setKeys());
   
   jp.add(settings1);
   jp.add(settings2);
   jd.add(jp);
   
   jd.setSize(1280, 720);
   jd.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
   jd.setVisible(true); 
   
  one = new OneDollar(this);
  one.setVerbose(true);
  one.disableAutoCheck();
  
  //learn all gestures here
  one.learn("LtoR:cycleShape", new int[] {99,246,100,246,101,246,102,246,103,246,104,246,105,246,106,246,107,246,108,246,109,246,111,246,112,246,113,246,114,246,115,246,116,246,117,246,118,246,119,246,120,246,122,246,123,246,124,246,125,246,126,246,127,246,128,246,129,246,130,246,131,246,132,246,133,246,134,246,135,246,136,246,138,246,139,246,140,246,141,246,142,246,143,246,145,246,146,246,147,246,148,246,149,246,150,246,151,246,152,246,153,246,154,246,155,246,156,246,157,246,158,246,159,246,160,246,161,246,162,246,163,246,164,246,165,246,166,246,168,246,169,246,171,246,172,246,173,246,174,246,175,246,176,246,178,246,178,247,179,247,181,247,182,247,183,247,184,247,186,247,187,247,188,247,189,247,190,247,191,247,193,247,194,248,196,248,198,248,199,248,200,248,201,248,202,248,203,248,205,248,206,248,207,248,208,248,209,248,210,248,211,248,212,248,213,248,214,248,215,248,216,248,217,248,218,248,219,248,220,248,221,249,222,249,223,249,224,249,226,249,227,249,228,249,230,249,231,249,233,249,234,249,236,249,237,249,238,249,239,249,240,249,242,249,243,249,244,249,245,249,246,249,247,249,249,249,250,249,252,249,253,249,254,249,255,249,256,249,257,249,259,249,260,250,261,250,262,250,263,250,264,250,265,250,266,250,267,250,268,250,269,250,270,250,271,250,272,250,273,250,274,250,276,250,277,251,278,251,279,251,280,251,281,251,282,251,283,251,284,251,286,251,287,251,288,251,289,251,290,251,291,252,292,252,294,252,295,252,297,252,298,252,299,252,300,252,301,252,302,252,303,252,304,252,305,252,305,253,307,253,308,253,309,253,310,253,311,253,312,254,313,254,314,254,315,254,317,254,318,254,319,254,320,255,321,255,322,255,323,255,324,255,325,255,326,255,328,255,329,255,330,255,331,255,332,255,333,255,333,256,335,256,336,256,337,256,338,256,339,256,340,256,341,256,342,256,343,256,344,256,345,256,346,256,347,256,348,256,350,256,351,256,352,257,353,257,354,257,356,257,357,257,358,257,359,257,360,257,361,257,362,257,363,257,364,257,365,257,365,258,366,258,367,258,368,258,369,258,370,258,371,258,372,258,373,258,374,258,375,258,376,258,377,258,378,258,379,258,380,258,381,258,382,258,382,259,383,259,384,259,385,259,386,259,387,259,388,259,388,260,389,260,390,260,391,260,392,260,393,260,394,261,395,261,396,261,397,261,398,261,399,261,400,261,401,261,402,261,403,261,});
  one.learn("BtoT:cycleColor", new int[] {243,273,243,272,243,271,243,270,243,269,243,268,243,267,243,266,243,265,243,264,243,263,243,262,243,261,243,260,243,259,243,258,243,257,243,256,243,255,243,254,243,253,243,252,243,251,243,250,243,249,243,248,243,247,243,246,243,245,243,243,244,242,244,241,244,240,244,239,244,238,244,237,244,236,244,235,244,234,244,233,244,232,244,231,244,230,244,229,244,227,245,227,245,226,245,224,245,223,245,221,245,220,245,219,245,218,245,217,245,215,245,214,245,212,245,211,245,209,245,208,245,207,245,206,245,205,245,204,245,203,245,202,245,201,245,200,245,199,245,198,245,197,245,196,245,195,245,193,245,192,245,191,245,190,245,189,245,188,245,187,245,186,245,185,245,183,245,182,245,180,245,179,245,178,245,177,245,176,245,175,245,174,245,173,245,172,245,171,245,170,245,169,245,168,245,167,245,166,245,165,245,164,245,163,245,162,245,161,245,160,245,159,245,158,245,157,245,156,245,155,245,154,245,153,245,152,245,151,245,150,245,149,245,147,245,146,245,145,245,144,245,143,245,142,245,141,245,140,245,139,245,138,245,137,245,136,245,135,245,134,245,133,});
  one.learn("RtoL:cycleWeight", new int[] {346,309,345,309,344,309,343,309,342,309,341,309,340,309,339,309,338,309,337,309,336,309,335,309,333,309,332,309,331,309,330,309,329,309,328,309,326,309,325,309,324,309,323,309,322,309,321,309,320,309,319,309,318,309,317,309,316,309,315,309,313,309,312,309,311,309,310,309,309,309,308,309,307,309,306,309,305,309,304,309,303,309,302,309,300,309,299,309,298,309,297,309,296,309,295,309,294,309,292,309,291,309,290,309,289,309,287,309,285,309,284,309,283,309,282,309,281,309,280,309,279,309,277,309,276,309,274,309,273,309,272,309,271,309,270,309,269,309,267,309,266,309,265,309,264,309,263,309,261,309,260,309,259,309,258,309,257,309,255,309,254,309,253,309,252,309,250,309,249,309,248,309,247,309,245,309,244,309,243,309,241,309,240,309,239,309,237,309,236,309,235,309,234,309,232,309,231,309,230,309,229,309,227,309,226,309,225,309,224,309,222,309,221,309,220,309,218,309,217,309,216,309,215,309,214,309,212,309,211,309,210,309,209,309,207,309,206,309,204,308,203,308,202,308,201,308,200,308,199,308,198,308,198,307,197,307,196,307,195,307,194,307,193,307,192,307,192,306,191,306,190,306,189,305,188,305,188,304,187,304,186,304,186,303,185,303,184,303,183,302,182,302,181,302,181,301,180,301,179,301,178,301,});
   
  one.learn("r:Red", new int[] {338,196,338,195,337,195,336,194,335,194,335,193,334,193,334,192,333,192,332,192,331,192,330,191,329,191,329,190,328,190,327,190,326,190,326,189,326,188,325,188,324,188,323,188,323,187,322,187,321,187,320,187,319,187,318,187,318,188,317,188,317,189,316,189,315,189,315,190,314,190,313,190,312,191,311,191,310,191,310,192,310,193,309,193,308,193,308,194,307,194,307,195,306,195,305,195,305,196,304,196,304,197,303,197,303,198,302,198,302,199,301,199,301,200,300,200,300,201,300,202,299,202,298,202,298,203,297,204,297,205,297,206,296,206,296,207,295,207,295,208,295,209,294,209,294,210,294,211,293,211,293,212,293,213,293,214,292,214,292,215,292,216,292,217,292,218,291,218,291,219,290,219,290,220,290,221,289,222,289,223,289,224,289,225,289,226,289,227,289,228,288,228,288,229,288,230,288,231,287,231,287,232,287,233,287,234,287,235,287,236,287,237,287,238,286,238,286,239,286,240,285,240,285,241,285,242,285,243,285,244,285,245,285,246,285,247,285,248,285,249,285,250,285,251,285,252,285,251,285,250,285,249,285,248,285,247,285,246,285,245,284,244,284,243,284,242,284,241,283,241,283,240,283,239,283,238,282,238,282,237,282,236,282,235,282,234,281,234,281,233,281,232,281,231,281,230,280,230,280,229,280,228,280,227,280,226,280,225,279,225,279,224,279,223,279,222,278,222,278,221,278,220,277,220,277,219,277,218,277,217,277,216,276,216,276,215,276,214,276,213,276,212,275,212,275,211,275,210,274,210,274,209,274,208,273,208,273,207,273,206,273,205,273,204,272,204,272,203,272,202,272,201,271,201,271,200,271,199,270,199,270,198,270,197,269,197,269,196,269,195,268,195,268,194,268,193,


});
  one.learn("g:Green", new int[] {
193,285,193,286,193,287,193,288,192,288,192,289,192,290,192,291,192,292,192,293,192,294,192,295,191,295,191,296,191,297,191,298,191,299,191,300,191,301,191,302,191,303,191,304,191,305,191,306,191,307,191,308,191,309,191,310,191,311,191,312,191,313,191,314,191,315,191,316,191,317,191,318,191,319,191,320,191,321,191,322,191,323,191,324,191,325,191,326,192,326,192,327,192,328,192,329,193,329,193,330,193,331,194,332,195,332,195,333,195,334,195,335,196,335,196,336,196,337,197,337,198,337,199,338,199,340,199,341,200,342,200,343,201,343,201,344,202,344,202,345,203,345,203,346,204,346,204,347,205,347,205,348,205,349,206,349,207,349,207,350,207,351,208,351,209,351,209,352,210,353,211,353,211,354,212,354,212,355,213,355,213,356,214,356,215,356,215,357,216,357,217,357,217,358,218,358,219,358,220,358,220,359,221,359,222,359,223,359,224,360,224,361,225,361,226,361,227,361,228,361,229,361,230,361,230,360,231,360,232,360,233,360,234,360,235,360,235,359,236,359,237,359,237,358,238,358,239,358,239,357,240,357,240,356,241,356,241,355,242,355,242,354,242,353,242,352,243,352,243,351,244,351,244,350,244,349,244,348,245,348,245,347,245,346,246,346,246,345,246,344,247,344,247,343,248,343,248,342,248,341,248,340,248,339,249,339,249,338,250,337,250,336,250,335,250,334,251,334,251,333,252,333,252,332,252,331,252,330,253,330,253,329,253,328,253,327,253,326,253,325,254,325,254,324,254,323,254,322,255,322,255,321,255,320,255,319,255,318,255,317,255,316,256,316,256,315,256,314,256,313,257,313,257,312,257,311,257,310,257,309,257,308,257,307,257,306,257,305,257,304,257,303,257,302,257,301,257,300,257,299,258,299,258,298,258,297,258,296,258,295,258,294,258,293,258,292,258,291,258,290,258,289,258,288,258,287,258,286,258,285,258,284,258,283,258,282,258,281,258,280,258,279,258,278,258,277,258,276,258,275,258,274,258,273,257,273,257,272,257,271,257,270,257,269,256,269,256,268,256,267,256,266,256,265,256,264,255,264,255,263,255,262,255,261,255,260,255,259,255,258,255,257,254,257,254,256,254,255,254,254,254,253,254,252,253,252,253,251,253,250,253,249,253,248,253,247,252,247,252,246,252,245,252,244,252,243,251,243,251,242,251,241,251,240,251,239,250,238,250,237,250,236,250,235,250,234,249,233,249,232,249,231,249,230,249,229,249,228,248,228,248,227,247,227,247,226,247,225,247,224,247,223,246,223,246,222,246,221,246,220,246,219,246,218,246,217,245,217,245,216,245,215,245,214,245,213,244,212,244,211,243,211,243,210,243,209,243,208,242,208,242,207,242,206,242,205,242,204,241,204,241,203,241,202,241,201,240,200,239,200,239,199,239,198,239,197,239,196,238,196,238,195,237,195,237,196,237,197,237,198,237,199,236,199,235,199,235,200,235,201,235,202,234,202,234,203,234,204,233,204,233,205,233,206,232,206,232,207,231,207,231,208,231,209,230,209,230,210,230,211,229,211,229,212,229,213,228,213,227,213,227,214,227,215,226,215,226,216,226,217,225,217,225,218,224,218,224,219,223,220,222,220,222,221,222,222,221,223,220,223,220,224,220,225,219,225,219,226,218,226,217,227,217,228,216,228,216,229,216,230,215,230,215,231,214,231,214,232,213,232,212,232,211,232,210,232,209,232,208,232,207,232,206,232,205,232,205,231,204,231,203,231,202,231,202,230,201,230,201,229,200,229,200,228,199,228,198,228,198,227,197,227,196,227,196,226,195,226,194,226,194,225,193,225,193,224,192,224,192,223,192,222,191,222,191,221,191,220,190,220,190,219,190,218,189,218,189,217,189,216,189,215,189,214,188,214,188,213,188,212,188,211,187,211,187,210,187,209,187,208,187,207,187,206,187,205,187,204,187,203,186,203,186,202,186,201,186,200,186,199,185,199,185,198,185,197,185,196,185,195,185,194,185,193,185,192,184,192,184,191,184,190,184,189,184,188,184,187,184,186,184,185,184,184,184,183,185,182,186,182,186,181,186,180,186,179,186,178,186,177,187,177,187,176,187,175,188,175,189,175,190,175,190,174,191,174,192,174,193,174,193,173,194,173,195,173,196,173,196,172,197,172,198,172,199,172,200,172,201,172,202,172,202,173,203,173,204,173,205,173,205,174,206,174,207,174,207,175,208,175,208,176,209,176,210,176,211,176,211,177,212,177,213,177,213,178,214,178,215,178,215,179,215,180,216,180,217,180,218,180,219,180,219,181,220,181,220,182,221,182,222,182,223,183,223,184,224,184,224,185,225,185,226,185,226,186,227,186,227,187,228,187,228,188,229,188,229,189,230,189,230,190,231,190,231,191,232,191,232,192,232,193,233,193,233,194,234,194,234,195,234,196,235,196,235,197,236,197,237,197,237,198,});
  one.learn("b:Blue", new int[] {171,104,171,105,172,106,172,107,172,108,172,109,172,110,172,112,172,113,172,114,172,116,172,117,172,118,172,119,173,120,173,121,173,123,173,125,173,126,173,127,173,129,173,130,174,131,174,132,174,133,174,135,174,136,174,137,174,138,174,139,174,142,174,143,174,144,174,145,175,146,175,147,175,148,175,149,175,150,175,151,175,152,175,153,176,153,176,154,176,155,176,156,176,157,177,157,177,158,177,159,177,160,177,161,177,162,178,162,178,163,178,164,178,165,178,166,178,167,178,168,178,169,179,169,179,170,179,171,179,172,179,173,180,173,180,174,180,175,180,176,180,177,180,178,180,179,180,180,180,181,180,182,181,182,181,183,181,184,181,185,182,185,182,186,182,187,182,188,182,189,182,190,182,191,182,192,183,193,183,194,183,195,183,196,183,197,183,198,183,199,183,200,183,201,183,202,183,203,183,204,183,205,183,206,183,207,183,208,184,208,184,209,184,210,184,211,184,212,184,213,184,214,184,215,184,216,184,217,184,218,184,219,184,220,185,221,185,222,185,223,185,224,185,225,185,226,185,227,185,228,185,229,185,230,185,231,185,232,185,233,185,234,185,235,185,236,185,237,185,238,185,239,185,240,185,241,185,242,185,243,185,244,185,245,185,246,185,247,185,248,185,249,186,250,186,251,186,252,186,253,186,254,186,255,186,256,186,257,186,258,186,259,186,260,186,261,186,262,186,263,186,264,186,265,186,266,186,267,186,268,186,269,187,269,187,270,187,271,187,272,187,273,187,274,187,275,187,276,187,277,188,277,188,278,188,279,188,280,188,281,188,282,188,283,189,283,189,284,189,285,189,286,189,287,189,288,190,288,190,289,190,290,190,291,190,292,190,293,190,294,191,294,191,295,191,296,192,296,192,297,192,298,192,299,193,299,193,300,194,300,195,300,196,301,198,301,198,302,199,302,200,302,201,302,201,303,201,304,202,304,203,304,203,305,204,305,205,305,206,305,206,306,207,306,208,307,209,307,209,308,210,308,211,308,211,309,212,309,213,309,213,310,214,310,215,310,215,311,216,311,217,311,218,312,219,312,220,312,221,312,221,313,222,313,223,313,224,312,225,312,225,311,226,311,227,310,228,310,229,310,229,309,230,308,230,307,231,307,231,306,232,306,233,306,233,305,234,305,234,304,235,304,235,303,236,303,236,302,237,302,237,301,238,301,239,300,240,300,240,299,241,298,242,298,243,297,244,297,245,296,245,295,246,295,247,295,247,294,248,294,249,293,250,293,251,293,251,292,252,292,253,292,253,291,253,290,254,290,255,290,255,289,256,289,256,288,257,288,257,287,258,287,258,286,258,285,258,284,258,283,258,282,258,280,258,279,258,278,258,277,258,276,259,275,259,274,259,273,259,272,259,271,259,270,259,269,259,268,259,266,259,265,259,264,259,263,259,262,259,261,259,260,259,259,259,258,259,257,259,256,259,255,259,254,259,253,258,253,258,252,257,252,256,252,256,251,255,251,255,250,254,250,253,249,252,249,251,249,251,248,250,248,249,248,249,247,248,247,248,246,247,246,247,245,246,245,245,245,245,244,244,244,244,243,243,243,242,243,242,242,241,242,241,241,240,241,239,241,238,240,237,240,236,240,236,239,235,239,235,238,234,238,234,237,233,237,232,237,231,237,231,236,230,236,229,236,229,235,228,235,227,234,226,234,225,234,225,233,224,233,223,233,223,232,222,232,221,232,220,232,220,231,219,231,218,231,218,230,217,230,217,229,216,229,215,229,214,229,213,229,212,229,212,230,212,231,211,231,210,231,210,232,209,234,208,234,207,236,206,238,205,239,204,240,204,241,201,242,201,243,200,245,199,245,199,246,197,248,197,249,196,249,195,250,194,251,194,252,193,252,193,253,192,254,191,255,190,256,189,256,189,257,189,258,188,258,188,259,188,260,188,261,188,262,188,263,188,264,187,264,187,265,186,265,186,266,186,267,186,268,186,269,186,270,186,271,186,272,185,273,185,274,185,275,185,276,185,277,184,278,184,279,184,280,184,281,184,282,184,283,184,284,184,285,184,286,184,287,184,288,183,288});
 
  //bind gestures to methods
  one.bind("LtoR:cycleShape", "cycleShape");
  one.bind("BtoT:cycleColor", "cycleColor");
  one.bind("RtoL:cycleWeight", "cycleWeight");
  
  one.bind("r:Red", "setRed");
  one.bind("g:Green", "setGreen");
  one.bind("b:Blue", "setBlue");
}

void draw() {
  if(!setting.equals("")){
    background(255);
    for(Shape shape : shapeStack) {
      shape.drawShape();
    }
    stroke(255);
    fill(255);
    rect(1280-125,0,125,75);
    fill(0);
    stroke(255);
    strokeWeight(0);
    textSize(16);
    text("Shape:" + modeNames[mode] + "\nColor:" + colorNames[colorIndex] + "\nThickness:" + weight,1160,25);
  
    if(gestureMade){
      text(gestureString, width/2 - textWidth(gestureString)/2, height/2);
      
      if(millis() - time > interval){
        gestureMade = false;
      }
    }
   }
}

void mousePressed() {
  if(!setting.equals("") && mouseButton == LEFT){
    x = mouseX;
    y = mouseY;
    firstShape = true;
    if(mode == 0){
       shapeStack.add(new Point(mouseX,mouseY,weight,currColor,firstShape));
    }
  }
}

void mouseReleased(){
  if(setting.equals("gestureMode")){
    one.check();
  }
}

void mouseDragged() {
  if(!setting.equals("") && mouseButton == LEFT){
      if(mode == 0) {
          shapeStack.add(new Point(mouseX,mouseY,weight,currColor,false));
          firstShape = false;
      }
      else if(mode == 1) {
        if(firstShape) {
          shapeStack.add(new Line(mouseX,mouseY,x,y,weight,currColor));
          firstShape = false;
        }
        else if(!firstShape && shapeStack.peek() != null) {
          shapeStack.pop();
          shapeStack.add(new Line(mouseX,mouseY,x,y,weight,currColor));
        }
      }
      else if(mode == 2) {
        if(firstShape) {
          shapeStack.add(new Rectangle(x,y,mouseX - x,mouseY - y,weight,currColor));
          firstShape = false;
        }
        else if(!firstShape && shapeStack.peek() != null) {
          shapeStack.pop();
          shapeStack.add(new Rectangle(x,y,mouseX - x,mouseY - y,weight,currColor));
        }
      }
      else {
        if(firstShape) {
          shapeStack.add(new Oval(x,y,mouseX - x,mouseY - y,weight,currColor));
          firstShape = false;
        }
        else if(!firstShape && shapeStack.peek() != null) {
          shapeStack.pop();
          shapeStack.add(new Oval(x,y,mouseX - x,mouseY - y,weight,currColor));
        }
      }
  }
  else if(setting.equals("gestureMode") && mouseButton == RIGHT){
      one.track(mouseX, mouseY);
  }
}

void keyPressed() {
  if(setting.equals("keyMode")){
    if(key == 's') {
        mode++;
        mode = mode%4; 
    }
    else if(key == 'a') {
        colorIndex++;
        colorIndex = colorIndex%4; 
        if(colorIndex == 0){
          currColor = color(0,0,0);
        }
        else if (colorIndex == 1){
          currColor = color(255,0,0);
        }
        else if(colorIndex == 2) {
          currColor = color(0,255,0);
        }
        else {
          currColor = color(0,0,255);
        }
    }
    else if(key == 'w') {
      if(weight == 2){
        weight *= 2;
      }
      else if(weight == 4){
        weight *= 2;
      }
      else {
        weight /= 4;
      }
    }
    else if(key == 'r'){
       currColor = color(255,0,0);
       colorIndex = 1;
    }
    else if(key == 'g'){
       currColor = color(0,255,0);
       colorIndex = 2;
    }
    else if(key == 'b'){
       currColor = color(0,0,255);
       colorIndex = 3;
    }
  }
  if(key == BACKSPACE && !shapeStack.isEmpty()) {
       if(shapeStack.peek().isPoint) {
           while(shapeStack.peek().firstPoint == false) {
             shapeStack.pop();
           }
       }
  shapeStack.pop();
  }
}

void setGestures(){
  setting = "gestureMode";
  jd.dispose();
}

void cycleColor(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
      colorIndex++;
      colorIndex = colorIndex%4; 
      if(colorIndex == 0){
        currColor = color(0,0,0);
      }
      else if (colorIndex == 1){
        currColor = color(255,0,0);
      }
      else if(colorIndex == 2) {
        currColor = color(0,255,0);
      }
      else {
        currColor = color(0,0,255);
      }
      
      gestureMade = true;
}

void cycleShape(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){      
      mode++;
      mode = mode%4; 
      
      time = millis();
      gestureMade = true;
}

void cycleWeight(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
      if(weight == 2){
        weight *= 2;
      }
      else if(weight == 4){
        weight *= 2;
      }
      else {
        weight /= 4;
      }
      
      time = millis();
      gestureMade = true;
}

void setRed(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
     currColor = color(255,0,0);
     colorIndex = 1;
     
      time = millis();
      gestureMade = true;
}

void setGreen(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
     currColor = color(0,255,0);
     colorIndex = 2;
     
      time = millis();
      gestureMade = true;
}

void setBlue(String gesture, float percent, int startX, int startY, int centroidX, int centroidY, int endX, int endY){
     currColor = color(0,0,255);
     colorIndex = 3;
     
      time = millis();
      gestureMade = true;
}

void setKeys(){
  setting = "keyMode";
  jd.dispose();
}

abstract class Shape {
  float x;
  float y;
  float weight;
  color shapeColor;
  boolean isPoint;
  boolean firstPoint;

  Shape(float x, float y, float weight, color shapeColor) {
    this.x = x;
    this.y = y;
    this.weight = weight;
    this.shapeColor = shapeColor;
  }

  abstract void drawShape();
}

class Line extends Shape {
   float x2;
   float y2;

   Line(float x,float y,float x2,float y2, float weight, color shapeColor) {
      super(x,y,weight,shapeColor);
      this.x2 = x2;
      this.y2 = y2;
      isPoint = false;
   }

   void drawShape() {
     stroke(shapeColor);
     strokeWeight(weight);
     line(x,y,x2,y2); 
   }
}

class Rectangle extends Shape {
   float width;
   float height;

   Rectangle(float x,float y,float width, float height, float weight, color shapeColor) {
      super(x,y,weight,shapeColor);
      this.width = width;
      this.height = height;
      isPoint = false;
   }

   void drawShape() {
     stroke(shapeColor);
     strokeWeight(weight);
     fill(shapeColor);
     rect(x,y,width,height); 
   }
}

class Oval extends Shape {
   float width;
   float height;

   Oval(float x,float y,float width,float height, float weight, color shapeColor) {
      super(x,y,weight,shapeColor);
      this.width = width;
      this.height = height;
      isPoint = false;
   }

   void drawShape() {
     stroke(shapeColor);
     strokeWeight(weight);
     fill(shapeColor);
     ellipse(x,y,width,height); 
   }
}

class Point extends Shape {
   float size;
   int numPoints;

   Point(float x,float y,float weight, color shapeColor, boolean firstPoint) {
      super(x,y,weight,shapeColor);
      isPoint = true;
      this.firstPoint = firstPoint;
   }

   void drawShape() {
     stroke(shapeColor);
     strokeWeight(weight);
     fill(shapeColor);
     point(x,y); 
   }
}
